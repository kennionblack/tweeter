import { AuthToken, Status, User } from "tweeter-shared";
import { ServerFacade } from "../../src/server/ServerFacade";
import "isomorphic-fetch";

describe("ServerFacade", () => {
  let serverFacade: ServerFacade;

  const MALE_IMAGE_URL: string =
    "https://faculty.cs.byu.edu/~jwilkerson/cs340/tweeter/images/donald_duck.png";
  const FEMALE_IMAGE_URL: string =
    "https://faculty.cs.byu.edu/~jwilkerson/cs340/tweeter/images/daisy_duck.png";
  const MAX_LATENCY_RANGE = 10000000;

  // copied from FakeData
  const testUser = new User("Allen", "Anderson", "@allen", MALE_IMAGE_URL);
  const testUserArray = [
    new User("Amy", "Ames", "@amy", FEMALE_IMAGE_URL),
    new User("Bob", "Bobson", "@bob", MALE_IMAGE_URL),
    new User("Bonnie", "Beatty", "@bonnie", FEMALE_IMAGE_URL),
    new User("Chris", "Colston", "@chris", MALE_IMAGE_URL),
    new User("Cindy", "Coats", "@cindy", FEMALE_IMAGE_URL),
    new User("Dan", "Donaldson", "@dan", MALE_IMAGE_URL),
    new User("Dee", "Dempsey", "@dee", FEMALE_IMAGE_URL),
    new User("Elliott", "Enderson", "@elliott", MALE_IMAGE_URL),
    new User("Elizabeth", "Engle", "@elizabeth", FEMALE_IMAGE_URL),
    new User("Frank", "Frandson", "@frank", MALE_IMAGE_URL),
  ];

  beforeEach(() => {
    serverFacade = new ServerFacade();
  });

  it("Register returns the user and authToken generated by FakeData in the lambda layer", async () => {
    const request = {
      firstName: "firstName",
      lastName: "lastName",
      alias: "alias",
      password: "password",
      userImageBytes: "imageStringBase64",
      imageFileExtension: "imageFileExtension",
    };

    const testToken = generateTestAuthToken();
    const [user, authToken] = await serverFacade.register(request);

    expect(user).toBeInstanceOf(User);
    expect(user).toEqual(testUser);

    expect(authToken).toBeInstanceOf(AuthToken);
    // this assumes that latency is less than 5 seconds
    const lowerBound = testToken.timestamp - MAX_LATENCY_RANGE;
    expect(testToken.timestamp - authToken.timestamp).toBeLessThanOrEqual(MAX_LATENCY_RANGE);
    expect(authToken.token).not.toEqual(testToken.token);
  });

  it("GetFollowers returns the list of followers generated by FakeData in the lambda layer", async () => {
    const pageSize = 10;
    const request = {
      token: generateTestAuthToken().token,
      userAlias: "@allen",
      pageSize: pageSize,
      lastItem: null,
    };

    const [users, hasMore] = await serverFacade.getMoreFollowers(request);
    console.log("Users:", users);
    console.log("Default:", testUserArray);

    expect(users.length).toBe(pageSize);
    for (let i = 0; i < pageSize; i++) {
      expect(users[i]).toEqual(testUserArray[i]);
    }
    // FakeData has more than 10 users, thus this should be true
    expect(hasMore).toBe(true);
  });

  it("GetFollowerCount returns an integer between 0 and 10", async () => {
    const MAX_INT_SIZE = 10;
    const MIN_INT_SIZE = 1;

    const request = {
      token: generateTestAuthToken().token,
      user: testUser.dto,
    };

    const count = await serverFacade.getFollowerCount(request);
    expect(count).toBeLessThanOrEqual(MAX_INT_SIZE);
    expect(count).toBeGreaterThanOrEqual(MIN_INT_SIZE);
    expect(Number.isInteger(count)).toBe(true);
  });
});

function generateTestAuthToken(): AuthToken {
  return AuthToken.Generate();
}
